//
//  DetailsViewModel.swift
//  AppWeather
//
//  Created by Johnson-Riche Louis on 28/01/2020.
//  Copyright (c) 2020 Johnson-Richie Louis. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsViewModel {
	var cityId: Int? { get set }
	var name: String { get set }
	var description: String { get set }
	var iconUrl: String? { get set }
	var temperature: String { get set }
	var additionnal: [(placeholder: String, text: String)] { get set }

	func fetchDatas()
}

protocol DetailsErrorViewModel {
	var title: String { get }
	var message: String { get }
	var actionTitle: String { get }
}

class DetailsViewModelImpl: DetailsViewModel {

	// MARK: - Property

	private let model: DetailsModel
	weak var view: DetailsView?

	var cityId: Int?
	var name: String = ""
	var description: String = ""
	var iconUrl: String?
	var temperature: String = ""
	var additionnal: [(placeholder: String, text: String)] = []

	// MARK: - Initialize

	init(model: DetailsModel) {
		self.model = model
	}

	// MARK: - Private

	private func presentContents(detailInfo: Detailnfo) {
		var temperatureFeels = ""
		if let temperatureFeelsFloat = detailInfo.temperatureFeels {
			temperatureFeels = String(format: "%.0f째", temperatureFeelsFloat)
		}
		additionnal = [("detail.max.temperature".localized().uppercased(), String(format: "%.0f째", detailInfo.maxTemperature)),
					   ("detail.min.temperature".localized().uppercased(), String(format: "%.0f째", detailInfo.minTemperature)),
					   ("detail.feelslike".localized().uppercased(), temperatureFeels),
					   ("detail.pressure".localized().uppercased(), "\(detailInfo.pressure) hPa"),
					   ("detail.humidity".localized().uppercased(), "\(detailInfo.humidity) %"),
					   ("detail.wind".localized().uppercased(), String(format: "%.0f km/h", detailInfo.windSpeed))]
		name = detailInfo.name
		description = detailInfo.description ?? ""
		iconUrl = detailInfo.icon
		temperature = String(format: "%.0f째", detailInfo.temperature)
		
		DispatchQueue.main.async { [weak self] in
			guard let self = self else {
				return
			}
			self.view?.update(viewModel: self)
		}
	}

	private func presentFetchedContentsError() {
		let viewModel = DetailsErrorViewModelImpl(title: "alert.title".localized(),
												  message: "alert.message".localized(),
												  actionTitle: "alert.action.title".localized())
		DispatchQueue.main.async { [weak self] in
			self?.view?.updateError(viewModel: viewModel)
		}
	}
}

// MARK: - DetailsViewModel

extension DetailsViewModelImpl {

	func fetchDatas() {
		guard let cityId = cityId else {
			presentFetchedContentsError()
			return
		}
		model.fetch(cityId: cityId) { [weak self] in
			switch $0 {
			case .success(let detailInfo):
				self?.presentContents(detailInfo: detailInfo)
			case .failure:
				self?.presentFetchedContentsError()
			}
		}
	}
}

// MARK: - DetailsErrorViewModel

struct DetailsErrorViewModelImpl: DetailsErrorViewModel {
	var title: String
	var message: String
	var actionTitle: String
}
