//
//  HomeInteractor.swift
//  AppWeather
//
//  Created by Johnson-Riche Louis on 26/01/2020.
//  Copyright (c) 2020 Johnson-Richie Louis. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeViewModel {
	var cityId: Int? { get }
	var name: String { get }
	var description: String { get }
	var currentTemperature: String { get }
	var days: [HomeDaysViewModel] { get }

	func fetchDatas()
	func didTapDetail()
}

protocol HomeDaysViewModel {
	var name: String { get }
	var max: String { get }
	var min: String { get }
	var imageUrl: String? { get }
}

protocol HomeErrorViewModel {
	var title: String { get }
	var message: String { get }
	var actionTitle: String { get }
}

class HomeViewModelImpl {

	// MARK: - Property

	weak var view: HomeView?
	private let model: HomeModel
	private let coordinator: HomeCoordinator

	var cityId: Int?
	var name: String = ""
	var description: String = ""
	var currentTemperature: String = ""
	var days: [HomeDaysViewModel] = []

	// MARK: - Initialize

	init(model: HomeModel, coordinator: HomeCoordinator) {
		self.model = model
		self.coordinator = coordinator
	}

	// MARK: - Private

	private func displayAlertError() {
		let viewModel = HomeErrorViewModelImpl(title: "alert.title".localized(),
											   message: "alert.message".localized(),
											   actionTitle: "alert.action.title".localized())
		view?.updateError(viewModel: viewModel)
	}

	private func displayHome(with info: HomeInfo) {
		days = info.daysInfo.map {
			HomeDaysViewModelImpl(name: $0.date.isToday ? "home.today".localized() : $0.date.dayAsString,
								  max: String(format: "%.0f", $0.maxTemperature),
								  min: String(format: "%.0f", $0.minTemperature),
								  imageUrl: $0.iconUrl)
		}
		name = info.city
		description = info.description ?? ""
		currentTemperature = String(format: "%.0fÂ°", info.currentTemperature ?? "")

		DispatchQueue.main.async { [weak self] in
			guard let self = self else {
				return
			}
			self.view?.update(viewModel: self)
		}
	}
}

// MARK: - HomeViewModel

extension HomeViewModelImpl: HomeViewModel {

	func didTapDetail() {
		guard let cityId = cityId else {
			displayAlertError()
			return
		}
		coordinator.startDetails(with: cityId)
	}

	func fetchDatas() {
		guard let cityId = cityId else {
			displayAlertError()
			return
		}
		model.fetchInfos(cityId: cityId) { [weak self] result in
			switch result {
			case .success(let info):
				self?.displayHome(with: info)
			case .failure:
				self?.displayAlertError()
			}
		}
	}
}

// MARK: - HomeDaysViewModel

struct HomeDaysViewModelImpl: HomeDaysViewModel {
	var name: String
	var max: String
	var min: String
	var imageUrl: String?
}

// MARK: - HomeErrorViewModel

struct HomeErrorViewModelImpl: HomeErrorViewModel {
	var title: String
	var message: String
	var actionTitle: String
}
